buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.12'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
	id 'jacoco'
}


group = 'com'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

bootJar{
	archiveFileName = 'app.jar'
}


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}



repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'

	//JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	//redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	//validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	//oauth2
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	//spring security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'

	//swagger
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.9'

	//JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

	//gson
	implementation 'com.google.code.gson:gson'

	//QueryDSL
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

	//Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	//mysql
	runtimeOnly 'com.mysql:mysql-connector-j'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	//slack
	implementation("com.slack.api:bolt:1.18.0")
	implementation("com.slack.api:bolt-servlet:1.18.0")
	implementation("com.slack.api:bolt-jetty:1.18.0")
	implementation "com.github.maricn:logback-slack-appender:1.4.0"

	//main
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	//s3
	implementation 'io.awspring.cloud:spring-cloud-starter-aws:2.3.1'

}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}

sourceSets {
	main.java.srcDir querydslDir
}

compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}

jacocoTestReport {
	reports {
		html.enabled true
		xml.enabled false
		csv.enabled false
		afterEvaluate {
			classDirectories.setFrom(
					files(classDirectories.files.collect {
						fileTree(dir: it, excludes: [
								'**/com/CStudy/domain/competition/dto/request/**', // 추가된 부분
								'**/com/CStudy/domain/competition/dto/request/**',
								'**/com/CStudy/global/initializer/**',
								'**/com/CStudy/global/exception/**',
								'**/com/CStudy/domain/**/entity/**',
						])
					})
			)
	}
		html.destination file("jacoco/jacocoHtml")
	}
}

jacocoTestCoverageVerification {

	violationRules {
		rule {
			element = 'CLASS'

			excludes = []
		}
	}
}